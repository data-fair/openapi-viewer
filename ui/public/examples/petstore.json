{
  "openapi": "3.0.0-RC0",
  "servers": [{
    "url": "http://petstore.swagger.io/v2"
  }],
  "info": {
    "description": "This is a sample server Petstore server.  You can find out more about Swagger at <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, you can use the api key \"special-key\" to test the authorization filters",
    "version": "1.0.0",
    "title": "Swagger Petstore",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "url": "http://swagger.io",
      "name": "Your pals at Swagger",
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [{
    "name": "user",
    "description": "Operations about user"
  }, {
    "name": "store",
    "description": "Access to Petstore orders",
    "externalDocs": {
      "description": "Find out more",
      "url": "http://swagger.io"
    }
  }, {
    "name": "pet",
    "description": "Everything about your Pets",
    "externalDocs": {
      "description": "Find out more",
      "url": "http://swagger.io"
    }
  }],
  "paths": {
    "/pet": {
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Add a new pet to the store",
        "description": "",
        "operationId": "addPet",
        "parameters": [],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [{
          "petstore_auth": [
            "write:pets",
            "read:pets"
          ]
        }],
        "requestBody": {
          "$ref": "#/components/requestBodies/requestBody1"
        }
      },
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "Update an existing pet",
        "description": "",
        "operationId": "updatePet",
        "parameters": [],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [{
          "petstore_auth": [
            "write:pets",
            "read:pets"
          ]
        }],
        "requestBody": {
          "$ref": "#/components/requestBodies/requestBody1"
        }
      }
    },
    "/pet/findByStatus": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by status",
        "description": "Multiple status values can be provided with comma seperated strings",
        "operationId": "findPetsByStatus",
        "parameters": [{
          "in": "query",
          "name": "status",
          "description": "Status values that need to be considered for filter",
          "required": false,
          "schema": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [{
          "petstore_auth": [
            "write:pets",
            "read:pets"
          ]
        }]
      }
    },
    "/pet/findByTags": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by tags",
        "description": "Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [{
          "in": "query",
          "name": "tags",
          "description": "Tags to filter by",
          "required": false,
          "schema": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  },
                  "example": {
                    "name": "rex",
                    "photoUrls": []
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "security": [{
          "petstore_auth": [
            "write:pets",
            "read:pets"
          ]
        }]
      }
    },
    "/pet/{petId}": {
      "parameters": [{
        "in": "path",
        "name": "petId",
        "description": "ID of pet",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int64"
        }
      }],
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Find pet by ID",
        "description": "Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions",
        "operationId": "getPetById",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [{
          "api_key": []
        }, {
          "petstore_auth": [
            "write:pets",
            "read:pets"
          ]
        }]
      },
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Updates a pet in the store with form data",
        "description": "",
        "operationId": "updatePetWithForm",
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [{
          "petstore_auth": [
            "write:pets",
            "read:pets"
          ]
        }],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Updated name of the pet",
                    "type": "string",
                    "required": true
                  },
                  "status": {
                    "description": "Updated status of the pet",
                    "type": "string",
                    "required": true
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "pet"
        ],
        "summary": "Deletes a pet",
        "description": "",
        "operationId": "deletePet",
        "parameters": [{
          "in": "header",
          "name": "api_key",
          "description": "",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "400": {
            "description": "Invalid pet value"
          }
        },
        "security": [{
          "petstore_auth": [
            "write:pets",
            "read:pets"
          ]
        }]
      }
    },
    "/store/order": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Place an order for a pet",
        "description": "",
        "operationId": "placeOrder",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Order"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "description": "order placed for purchasing the pet",
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        }
      }
    },
    "/store/order/{orderId}": {
      "parameters": [{
        "in": "path",
        "name": "orderId",
        "description": "ID of the order",
        "required": true,
        "schema": {
          "type": "string"
        }
      }],
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
        "operationId": "deleteOrder",
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "description": "Created user object",
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    },
    "/user/createWithArray": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "description": "List of user object",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "User"
                }
              }
            }
          }
        }
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithListInput",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "description": "List of user object",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "parameters": [{
          "in": "query",
          "name": "username",
          "description": "The user name for login",
          "required": false,
          "schema": {
            "type": "string"
          }
        }, {
          "in": "query",
          "name": "password",
          "description": "The password for login in clear text",
          "required": false,
          "schema": {
            "type": "string",
            "format": "password"
          }
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "parameters": [{
        "in": "path",
        "name": "username",
        "description": "The user name",
        "required": true,
        "schema": {
          "type": "string"
        }
      }],
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "description": "Updated user object",
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "xml": {
              "name": "id"
            }
          },
          "username": {
            "type": "string",
            "xml": {
              "name": "username"
            }
          },
          "firstName": {
            "type": "string",
            "xml": {
              "name": "firstName"
            }
          },
          "lastName": {
            "type": "string",
            "xml": {
              "name": "lastName"
            }
          },
          "email": {
            "type": "string",
            "xml": {
              "name": "email"
            }
          },
          "password": {
            "type": "string",
            "xml": {
              "name": "password"
            }
          },
          "phone": {
            "type": "string",
            "xml": {
              "name": "phone"
            }
          },
          "userStatus": {
            "type": "integer",
            "format": "int32",
            "xml": {
              "name": "userStatus"
            },
            "description": "User Status"
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "Category": {
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "xml": {
              "name": "id"
            }
          },
          "name": {
            "type": "string",
            "xml": {
              "name": "name"
            }
          }
        },
        "xml": {
          "name": "Category"
        }
      },
      "Pet": {
        "required": [
          "name",
          "photoUrls"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "xml": {
              "name": "id"
            }
          },
          "category": {
            "xml": {
              "name": "category"
            },
            "$ref": "#/components/schemas/Category"
          },
          "name": {
            "type": "string",
            "example": "doggie",
            "xml": {
              "name": "name"
            }
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true
            },
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "status": {
            "type": "string",
            "xml": {
              "name": "status"
            },
            "description": "pet status in the store"
          }
        },
        "xml": {
          "name": "Pet"
        }
      },
      "Tag": {
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "xml": {
              "name": "id"
            }
          },
          "name": {
            "type": "string",
            "xml": {
              "name": "name"
            }
          }
        },
        "xml": {
          "name": "Tag"
        }
      },
      "Order": {
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "xml": {
              "name": "id"
            }
          },
          "petId": {
            "type": "integer",
            "format": "int64",
            "xml": {
              "name": "petId"
            }
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "xml": {
              "name": "quantity"
            }
          },
          "shipDate": {
            "type": "string",
            "format": "date-time",
            "xml": {
              "name": "shipDate"
            }
          },
          "status": {
            "type": "string",
            "xml": {
              "name": "status"
            },
            "description": "Order Status"
          },
          "complete": {
            "type": "boolean"
          }
        },
        "xml": {
          "name": "Order"
        }
      }
    },
    "responses": {},
    "parameters": {},
    "examples": {},
    "requestBodies": {
      "requestBody1": {
        "content": {
          "application/json": {
            "description": "Pet object that needs to be added to the store",
            "schema": {
              "$ref": "#/components/schemas/Pet"
            },
            "example": {
              "name": "rex",
              "photoUrls": []
            }
          },
          "application/xml": {
            "description": "Pet object that needs to be added to the store"
          }
        }
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      },
      "petstore_auth": {
        "type": "oauth2",
        "flow": {
          "implicit": {
            "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
            "scopes": {}
          }
        }
      }
    },
    "headers": {}
  }
}
